---
import DashboardLayout from '../../../layouts/DashboardLayout.astro';
import { newsService } from '../../../services/newsService';
import { redactionService } from '../../../services/redactionService';
import type { News, Category, Redaction } from '../../../types/news';

// Esta función es requerida para rutas dinámicas cuando se usa output: 'hybrid' o 'static'
export async function getStaticPaths() {
  // Obtener todas las noticias para generar las rutas
  try {
    const response = await newsService.getAllNews();
    const news = response.data || [];
    
    // Crear un path para cada noticia
    return news.map((item) => ({
      params: { id: item.id.toString() },
    }));
  } catch (error) {
    console.error('Error al obtener noticias para rutas estáticas:', error);
    // Devolver un array vacío en caso de error
    return [];
  }
}

// Obtener el ID de la noticia de los parámetros
const { id } = Astro.params;

// Obtener los datos de la noticia, categorías y redacciones
let news: News | null = null;
let categories: Category[] = [];
let redactions: Redaction[] = [];
let loading = true;
let error: string | null = null;

try {
  if (id) {
    const [newsResponse, categoriesResponse, redactionsResponse] = await Promise.all([
      newsService.getNewsById(parseInt(id)),
      newsService.getAllCategories(),
      redactionService.getAllRedactions()
    ]);
    
    news = newsResponse.data || null;
    categories = categoriesResponse.data || [];
    redactions = redactionsResponse.data || [];
  }
  loading = false;
} catch (err) {
  error = 'Error al cargar los datos';
  loading = false;
  console.error('Error al cargar datos:', err);
}

// Obtener las categorías de la noticia actual
const selectedCategoryIds = news?.categories ? 
  Array.isArray(news.categories) ? 
    news.categories.map((cat: any) => typeof cat === 'object' ? cat.id : cat) 
    : [] 
  : [];
---

<DashboardLayout titulo="Editar Noticia">
<div class="max-w-4xl mx-auto py-8">
  <div class="mb-6">
    <a href="/noticias" class="text-blue-600 hover:text-blue-800 flex items-center">
      <svg class="w-5 h-5 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
      </svg>
      Volver a la lista
    </a>
  </div>
  
  {loading && (
    <div class="bg-white rounded-2xl shadow-lg overflow-hidden p-8 text-center">
      <div class="inline-block animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600 mb-4"></div>
      <p class="text-gray-600">Cargando datos...</p>
    </div>
  )}
  
  {error && (
    <div class="bg-white rounded-2xl shadow-lg overflow-hidden p-8 text-center">
      <svg class="w-12 h-12 text-red-500 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
      <p class="text-red-500 font-medium">{error}</p>
      <button id="retry-button" class="mt-4 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-300">
        Reintentar
      </button>
    </div>
  )}
  
  {!loading && !error && !news && (
    <div class="bg-white rounded-2xl shadow-lg overflow-hidden p-8 text-center">
      <svg class="w-12 h-12 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
      </svg>
      <p class="text-gray-600 font-medium">Noticia no encontrada</p>
      <a href="/noticias" class="mt-4 inline-block px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-300">
        Ver todas las noticias
      </a>
    </div>
  )}
  
  {!loading && !error && news && (
    <div class="bg-white rounded-2xl shadow-lg overflow-hidden">
      <div class="p-6 border-b border-gray-200">
        <h2 class="text-xl font-bold text-gray-900">Editar Noticia</h2>
      </div>
      <div class="p-6">
        <form id="editarNoticiaForm" class="space-y-6">
          <input type="hidden" id="news_id" value={news.id} />
          
          <div>
            <label for="title" class="block text-sm font-medium text-gray-700 mb-1">Título</label>
            <input 
              type="text" 
              id="title" 
              name="title" 
              value={news.title}
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            />
          </div>
          
          <div>
            <label for="content" class="block text-sm font-medium text-gray-700 mb-1">Contenido</label>
            <textarea 
              id="content" 
              name="content" 
              rows="8"
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            >{news.content}</textarea>
          </div>
          
          <div>
            <label for="redaction_id" class="block text-sm font-medium text-gray-700 mb-1">Redacción</label>
            <select 
              id="redaction_id" 
              name="redaction_id" 
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            >
              {redactions.map((redaction) => (
                <option 
                  value={redaction.id} 
                  selected={redaction.id === news.redaction_id}
                >
                  {redaction.redaction?.substring(0, 50) || 'Sin contenido'}...
                </option>
              ))}
            </select>
          </div>
          
          <div>
            <label for="categories" class="block text-sm font-medium text-gray-700 mb-1">Categorías</label>
            <select 
              id="categories" 
              name="categories" 
              multiple
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              required
            >
              {categories.map((category) => (
                <option 
                  value={category.id} 
                  selected={selectedCategoryIds.includes(category.id)}
                >
                  {category.category}
                </option>
              ))}
            </select>
            <p class="text-xs text-gray-500 mt-1">Mantén presionado Ctrl (o Cmd en Mac) para seleccionar múltiples categorías</p>
          </div>
          
          <div>
            <label for="principal_image" class="block text-sm font-medium text-gray-700 mb-1">Imagen Principal (URL)</label>
            <input 
              type="url" 
              id="principal_image" 
              name="principal_image" 
              value={news.principal_image}
              class="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              placeholder="https://ejemplo.com/imagen.jpg"
            />
          </div>
          
          <div class="flex items-center">
            <input 
              type="checkbox" 
              id="isPremium" 
              name="isPremium" 
              checked={news.isPremium}
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label for="isPremium" class="ml-2 block text-sm text-gray-700">
              Contenido Premium
            </label>
          </div>
          
          <div class="flex items-center">
            <input 
              type="checkbox" 
              id="is_featured" 
              name="is_featured" 
              checked={news.is_featured}
              class="h-4 w-4 text-blue-600 focus:ring-blue-500 border-gray-300 rounded"
            />
            <label for="is_featured" class="ml-2 block text-sm text-gray-700">
              Destacar en portada
            </label>
          </div>
          
          <div class="flex justify-end space-x-4">
            <a 
              href="/noticias" 
              class="px-6 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors duration-300"
            >
              Cancelar
            </a>
            <button 
              type="submit" 
              class="px-6 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-300"
            >
              Guardar Cambios
            </button>
          </div>
        </form>
      </div>
    </div>
  )}
</div>
</DashboardLayout>

<script>
import { newsService } from '../../../services/newsService';
import toast from 'react-hot-toast';

// Verificar autenticación
if (typeof window !== 'undefined') {
  const token = localStorage.getItem('token');
  if (!token) {
    window.location.href = '/login';
  }
}

document.addEventListener('DOMContentLoaded', () => {
  // Botón de reintentar
  const retryButton = document.getElementById('retry-button');
  retryButton?.addEventListener('click', () => {
    window.location.reload();
  });
  
  // Formulario de edición
  const form = document.getElementById('editarNoticiaForm');
  
  form?.addEventListener('submit', async (e) => {
    e.preventDefault();
    
    const newsId = (document.getElementById('news_id') as HTMLInputElement).value;
    const formData = new FormData(e.target as HTMLFormElement);
    const title = formData.get('title') as string;
    const content = formData.get('content') as string;
    const redaction_id = Number(formData.get('redaction_id'));
    const principal_image = formData.get('principal_image') as string;
    const isPremium = formData.get('isPremium') === 'on';
    const is_featured = formData.get('is_featured') === 'on';
    
    // Obtener categorías seleccionadas
    const categoriesSelect = document.getElementById('categories') as HTMLSelectElement;
    const selectedCategories = Array.from(categoriesSelect.selectedOptions).map(option => Number(option.value));
    
    try {
      // Actualizar la noticia
      const newsData = {
        title,
        content,
        redaction_id,
        principal_image: principal_image || 'https://via.placeholder.com/800x400',
        isPremium,
        is_featured,
        categories: selectedCategories
      };
      
      const response = await newsService.updateNews(parseInt(newsId), newsData);
      
      if (response.success) {
        toast.success('Noticia actualizada exitosamente');
        window.location.href = '/noticias';
      } else {
        toast.error(response.message || 'Error al actualizar la noticia');
      }
    } catch (error) {
      console.error('Error al actualizar la noticia:', error);
      toast.error('Error al actualizar la noticia. Inténtalo de nuevo.');
    }
  });
});
</script>

