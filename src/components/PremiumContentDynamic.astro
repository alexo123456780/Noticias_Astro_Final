---
// Componente para mostrar contenido premium dinámico
// Este componente mostrará contenido diferente dependiendo de si el usuario tiene una suscripción premium o no

const { 
  title = "Contenido Premium",
  teaser = "Este contenido es exclusivo para suscriptores premium.",
  buttonText = "Suscríbete ahora",
  buttonLink = "/premium"
} = Astro.props;
---

<div id="premiumContentContainer">
  <div class="premium-content hidden" id="premiumContent">
    <!-- Contenido para usuarios premium -->
    <slot name="premium" />
  </div>
  
  <div class="premium-teaser bg-gradient-to-r from-gray-100 to-gray-200 rounded-xl p-6 relative overflow-hidden" id="premiumTeaser">
    <div class="absolute top-0 right-0 bg-yellow-500 text-white text-xs font-bold px-3 py-1 rounded-bl-lg">
      PREMIUM
    </div>
    
    <h3 class="text-xl font-bold text-gray-900 mb-3">{title}</h3>
    
    <div class="blur-sm mb-4">
      <slot name="premium" />
    </div>
    
    <div class="text-center">
      <p class="text-gray-700 mb-4">{teaser}</p>
      <a href={buttonLink} class="inline-block bg-yellow-500 hover:bg-yellow-600 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-300">
        {buttonText}
      </a>
    </div>
  </div>
</div>

<script>
  import { readerService } from '../services/readerService';
  
  // Verificar si el usuario tiene suscripción premium
  document.addEventListener('DOMContentLoaded', async () => {
    const token = localStorage.getItem('token');
    const userStr = localStorage.getItem('user');
    const user = userStr ? JSON.parse(userStr) : null;
    
    if (!token || !user) {
      // Usuario no autenticado, mostrar teaser
      showPremiumTeaser();
      return;
    }
    
    try {
      // Obtener el reader asociado al usuario
      const readersResponse = await readerService.getAllReaders();
      const readers = readersResponse.data || [];
      const currentReader = readers.find(reader => reader.user_id === user.id);
      
      if (!currentReader) {
        // Usuario no es un reader, mostrar teaser
        showPremiumTeaser();
        return;
      }
      
      // Verificar si tiene suscripción activa
      const suscriptionStatus = await readerService.checkActiveSuscription(currentReader.id);
      
      if (suscriptionStatus.hasActiveSuscription) {
        // Usuario premium, mostrar contenido completo
        showPremiumContent();
      } else {
        // Usuario sin suscripción premium, mostrar teaser
        showPremiumTeaser();
      }
    } catch (error) {
      console.error('Error al verificar estado premium:', error);
      // En caso de error, mostrar teaser por defecto
      showPremiumTeaser();
    }
  });
  
  function showPremiumContent() {
    const premiumContent = document.getElementById('premiumContent');
    const premiumTeaser = document.getElementById('premiumTeaser');
    
    if (premiumContent && premiumTeaser) {
      premiumContent.classList.remove('hidden');
      premiumTeaser.classList.add('hidden');
    }
  }
  
  function showPremiumTeaser() {
    const premiumContent = document.getElementById('premiumContent');
    const premiumTeaser = document.getElementById('premiumTeaser');
    
    if (premiumContent && premiumTeaser) {
      premiumContent.classList.add('hidden');
      premiumTeaser.classList.remove('hidden');
    }
  }
</script>